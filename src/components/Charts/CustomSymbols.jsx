import React from "react";

// ðŸ”¹ OdaSymbolRenderer
export const OdaSymbolRenderer = ({ cx, cy }) => {
  const radius = 10; // Radio del cÃ­rculo
  const centerX = 12;
  const centerY = 12;

  // Punto diagonal derecha (45Â°)
  const xRightDiagonal = centerX + radius * Math.cos((45 * Math.PI) / 180);
  const yRightDiagonal = centerY + radius * Math.sin((45 * Math.PI) / 180);

  // Punto izquierdo (lÃ­nea horizontal)
  const xLeft = centerX - radius;
  const yLeft = centerY;

  // Punto superior (lÃ­nea vertical)
  const xTop = centerX;
  const yTop = centerY - radius;

  return (
    <svg x={cx - 10} y={cy - 10} width="32" height="32" viewBox="0 0 24 24">
      {/* CÃ­rculo principal */}
      <circle cx="12" cy="12" r="10" stroke="black" strokeWidth="2" fill="transparent" />

      {/* LÃ­nea diagonal derecha (45Â°) */}
      <line x1={centerX} y1={centerY} x2={xRightDiagonal} y2={yRightDiagonal} stroke="black" strokeWidth="2" />

      {/* LÃ­nea horizontal hacia la izquierda */}
      <line x1={centerX} y1={centerY} x2={xLeft} y2={yLeft} stroke="black" strokeWidth="2" />

      {/* LÃ­nea vertical hacia arriba */}
      <line x1={centerX} y1={centerY} x2={xTop} y2={yTop} stroke="black" strokeWidth="2" />
    </svg>
  );
};

// ðŸ”¹ OdpSymbolRenderer
export const OdpSymbolRenderer = ({ cx, cy }) => {
  const radius = 10; // Radio del cÃ­rculo
  const centerX = 12;
  const centerY = 12;

  // Punto diagonal derecha (315Â°)
  const xRightDiagonal = centerX + radius * Math.cos((315 * Math.PI) / 180);
  const yRightDiagonal = centerY + radius * Math.sin((315 * Math.PI) / 180);

  // Punto izquierdo (lÃ­nea horizontal)
  const xLeft = centerX - radius;
  const yLeft = centerY;

  // Punto inferior (lÃ­nea vertical)
  const xBottom = centerX;
  const yBottom = centerY + radius;

  return (
    <svg x={cx - 10} y={cy - 10} width="32" height="32" viewBox="0 0 24 24">
      {/* CÃ­rculo principal */}
      <circle cx="12" cy="12" r="10" stroke="black" strokeWidth="2" fill="transparent" />

      {/* LÃ­nea diagonal derecha (315Â°) */}
      <line x1={centerX} y1={centerY} x2={xRightDiagonal} y2={yRightDiagonal} stroke="black" strokeWidth="2" />

      {/* LÃ­nea horizontal hacia la izquierda */}
      <line x1={centerX} y1={centerY} x2={xLeft} y2={yLeft} stroke="black" strokeWidth="2" />

      {/* LÃ­nea vertical hacia abajo */}
      <line x1={centerX} y1={centerY} x2={xBottom} y2={yBottom} stroke="black" strokeWidth="2" />
    </svg>
  );
};


// ðŸ”¹ OdtSymbolRenderer
export const OdtSymbolRenderer = ({ cx, cy }) => {
  const radius = 10; // Radio del cÃ­rculo
  const centerX = 12;
  const centerY = 12;

  // Punto diagonal izquierda (225Â°)
  const xLeftDiagonal = centerX + radius * Math.cos((225 * Math.PI) / 180);
  const yLeftDiagonal = centerY + radius * Math.sin((225 * Math.PI) / 180);

  // Punto diagonal derecha (135Â°)
  const xRightDiagonal = centerX + radius * Math.cos((135 * Math.PI) / 180);
  const yRightDiagonal = centerY + radius * Math.sin((135 * Math.PI) / 180);

  // Punto derecho (lÃ­nea horizontal)
  const xRight = centerX + radius;
  const yRight = centerY;

  return (
    <svg x={cx - 10} y={cy - 10} width="32" height="32" viewBox="0 0 24 24">
      {/* CÃ­rculo principal */}
      <circle cx="12" cy="12" r="10" stroke="black" strokeWidth="2" fill="transparent" />

      {/* LÃ­nea horizontal hacia la derecha */}
      <line x1={centerX} y1={centerY} x2={xRight} y2={yRight} stroke="black" strokeWidth="2" />

      {/* LÃ­nea diagonal izquierda (225Â°) */}
      <line x1={centerX} y1={centerY} x2={xLeftDiagonal} y2={yLeftDiagonal} stroke="black" strokeWidth="2" />

      {/* LÃ­nea diagonal derecha (135Â°) */}
      <line x1={centerX} y1={centerY} x2={xRightDiagonal} y2={yRightDiagonal} stroke="black" strokeWidth="2" />
    </svg>
  );
};

// ðŸ”¹ OiaSymbolRenderer
export const OiaSymbolRenderer = ({ cx, cy }) => {
  const radius = 10; // Radio del cÃ­rculo
  const centerX = 12;
  const centerY = 12;

  // Punto diagonal izquierda (135Â°)
  const xLeftDiagonal = centerX + radius * Math.cos((135 * Math.PI) / 180);
  const yLeftDiagonal = centerY + radius * Math.sin((135 * Math.PI) / 180);

  // Punto derecho (lÃ­nea horizontal)
  const xRight = centerX + radius;
  const yRight = centerY;

  // Punto superior (lÃ­nea vertical)
  const xTop = centerX;
  const yTop = centerY - radius;

  return (
    <svg x={cx - 10} y={cy - 10} width="32" height="32" viewBox="0 0 24 24">
      {/* CÃ­rculo principal */}
      <circle cx="12" cy="12" r="10" stroke="black" strokeWidth="2" fill="transparent" />

      {/* LÃ­nea diagonal izquierda (135Â°) */}
      <line x1={centerX} y1={centerY} x2={xLeftDiagonal} y2={yLeftDiagonal} stroke="black" strokeWidth="2" />

      {/* LÃ­nea horizontal hacia la derecha */}
      <line x1={centerX} y1={centerY} x2={xRight} y2={yRight} stroke="black" strokeWidth="2" />

      {/* LÃ­nea vertical hacia arriba */}
      <line x1={centerX} y1={centerY} x2={xTop} y2={yTop} stroke="black" strokeWidth="2" />
    </svg>
  );
};

// ðŸ”¹ OipSymbolRenderer
export const OipSymbolRenderer = ({ cx, cy }) => {
  const radius = 10; // Radio del cÃ­rculo
  const centerX = 12;
  const centerY = 12;

  // Punto diagonal izquierda (225Â°)
  const xLeftDiagonal = centerX + radius * Math.cos((225 * Math.PI) / 180);
  const yLeftDiagonal = centerY + radius * Math.sin((225 * Math.PI) / 180);

  // Punto derecho (lÃ­nea horizontal)
  const xRight = centerX + radius;
  const yRight = centerY;

  // Punto inferior (lÃ­nea vertical)
  const xBottom = centerX;
  const yBottom = centerY + radius;

  return (
    <svg x={cx - 10} y={cy - 10} width="32" height="32" viewBox="0 0 24 24">
      {/* CÃ­rculo principal */}
      <circle cx="12" cy="12" r="10" stroke="black" strokeWidth="2" fill="transparent" />

      {/* LÃ­nea diagonal izquierda (225Â°) */}
      <line x1={centerX} y1={centerY} x2={xLeftDiagonal} y2={yLeftDiagonal} stroke="black" strokeWidth="2" />

      {/* LÃ­nea horizontal hacia la derecha */}
      <line x1={centerX} y1={centerY} x2={xRight} y2={yRight} stroke="black" strokeWidth="2" />

      {/* LÃ­nea vertical hacia abajo */}
      <line x1={centerX} y1={centerY} x2={xBottom} y2={yBottom} stroke="black" strokeWidth="2" />
    </svg>
  );
};


// ðŸ”¹ OitSymbolRenderer
// ðŸ”¹ OitSymbolRenderer (CorrecciÃ³n basada en el cÃ³digo Flutter)
export const OitSymbolRenderer = ({ cx, cy }) => {
  const radius = 10; // Radio del cÃ­rculo
  const centerX = 12;
  const centerY = 12;

  // Punto izquierdo (lÃ­nea horizontal)
  const xLeft = centerX - radius;
  const yLeft = centerY;

  // Punto diagonal derecha (315Â°)
  const xRight = centerX + radius * Math.cos((315 * Math.PI) / 180);
  const yRight = centerY + radius * Math.sin((315 * Math.PI) / 180);

  // Punto diagonal izquierda (45Â°)
  const xDiagLeft = centerX + radius * Math.cos((45 * Math.PI) / 180);
  const yDiagLeft = centerY + radius * Math.sin((45 * Math.PI) / 180);

  return (
    <svg x={cx - 10} y={cy - 10} width="32" height="32" viewBox="0 0 24 24">
      {/* CÃ­rculo principal */}
      <circle cx="12" cy="12" r="10" stroke="black" strokeWidth="2" fill="transparent" />

      {/* LÃ­nea horizontal hacia la izquierda */}
      <line x1={centerX} y1={centerY} x2={xLeft} y2={yLeft} stroke="black" strokeWidth="2" />

      {/* LÃ­nea diagonal izquierda (45Â°) */}
      <line x1={centerX} y1={centerY} x2={xDiagLeft} y2={yDiagLeft} stroke="black" strokeWidth="2" />

      {/* LÃ­nea diagonal derecha (315Â°) */}
      <line x1={centerX} y1={centerY} x2={xRight} y2={yRight} stroke="black" strokeWidth="2" />
    </svg>
  );
};

// ðŸ”¹ OsSymbolRenderer 
export const OsSymbolRenderer = ({ cx, cy }) => {
  const radius = 10; // Radio del cÃ­rculo
  const centerX = 12;
  const centerY = 12;

  // Punto superior (lÃ­nea vertical)
  const xTop = centerX;
  const yTop = centerY - radius;

  // Punto diagonal izquierda (135Â°)
  const xLeft = centerX + radius * Math.cos((135 * Math.PI) / 180);
  const yLeft = centerY + radius * Math.sin((135 * Math.PI) / 180);

  // Punto diagonal derecha (45Â°)
  const xRight = centerX + radius * Math.cos((45 * Math.PI) / 180);
  const yRight = centerY + radius * Math.sin((45 * Math.PI) / 180);

  return (
    <svg x={cx - 10} y={cy - 10} width="32" height="32" viewBox="0 0 24 24">
      {/* CÃ­rculo principal */}
      <circle cx="12" cy="12" r="10" stroke="black" strokeWidth="2" fill="transparent" />

      {/* LÃ­nea vertical hacia arriba */}
      <line x1={centerX} y1={centerY} x2={xTop} y2={yTop} stroke="black" strokeWidth="2" />

      {/* LÃ­nea diagonal izquierda (135Â°) */}
      <line x1={centerX} y1={centerY} x2={xLeft} y2={yLeft} stroke="black" strokeWidth="2" />

      {/* LÃ­nea diagonal derecha (45Â°) */}
      <line x1={centerX} y1={centerY} x2={xRight} y2={yRight} stroke="black" strokeWidth="2" />
    </svg>
  );
};

// ðŸ”¹ OpSymbolRenderer
export const OpSymbolRenderer = ({ cx, cy }) => {
  const radius = 10; // TamaÃ±o del cÃ­rculo
  const centerX = 12;
  const centerY = 12;

  // Punto inferior (lÃ­nea vertical)
  const xBottom = centerX;
  const yBottom = centerY + radius;

  // Punto diagonal derecha (315Â°)
  const xRight = centerX + radius * Math.cos((315 * Math.PI) / 180);
  const yRight = centerY + radius * Math.sin((315 * Math.PI) / 180);

  // Punto diagonal izquierda (225Â°)
  const xLeft = centerX + radius * Math.cos((225 * Math.PI) / 180);
  const yLeft = centerY + radius * Math.sin((225 * Math.PI) / 180);

  return (
    <svg x={cx - 10} y={cy - 10} width="32" height="32" viewBox="0 0 24 24">
      {/* CÃ­rculo principal */}
      <circle cx="12" cy="12" r="10" stroke="black" strokeWidth="2" fill="transparent" />

      {/* LÃ­nea vertical hacia abajo */}
      <line x1={centerX} y1={centerY} x2={xBottom} y2={yBottom} stroke="black" strokeWidth="2" />

      {/* LÃ­nea diagonal izquierda */}
      <line x1={centerX} y1={centerY} x2={xLeft} y2={yLeft} stroke="black" strokeWidth="2" />

      {/* LÃ­nea diagonal derecha */}
      <line x1={centerX} y1={centerY} x2={xRight} y2={yRight} stroke="black" strokeWidth="2" />
    </svg>
  );
};

